/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 19:44:44 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UmCarroJa_ESTest extends UmCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setEmail("dg@%(n#");
      cliente0.setNAlugueres((-7));
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.classificarClienteJa("dg@%(n#", 1678);
      assertEquals("", umCarroJa0.getEmailUser());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisPertoJa(coordinate1, coordinate0, parDatas0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem ve\u00EDculos dispon\u00EDveis para alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-4585.9409481885), (-4585.9409481885));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisBaratoNoPerimetro(coordinate1, coordinate0, parDatas0, 1502.0, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(6);
      umCarroJa0.registarUtilizador(cliente0);
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(1669);
      umCarroJa0.classificarCliente(aluguer0, 2);
      assertEquals(1669, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(1);
      umCarroJa0.registarUtilizador(cliente0);
      Aluguer aluguer0 = new Aluguer();
      umCarroJa0.classificarCliente(aluguer0, 2);
      assertEquals(1, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.alterarPosCliente("", (Coordinate) null);
      assertEquals(0, umCarroJa0.getNVeiculos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      umCarroJa0.alterarPosAutonomiaVeiculo("", coordinate0);
      assertEquals("", umCarroJa0.getEmailUser());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      int int0 = umCarroJa0.getNVeiculos();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2185, 2185, 473, 473, 0, 1786);
      Coordinate coordinate0 = new Coordinate(4.0, 0);
      Cliente cliente0 = new Cliente("=dk$V", (String) null, "Ef* i^VRG,F&1pTp", "J", "", mockGregorianCalendar0, coordinate0, 27, 1786, 1846.531395060076);
      umCarroJa0.registarUtilizador(cliente0);
      int int0 = umCarroJa0.getNUsers();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        umCarroJa0.totalFactBDates("Mail do Cliente: ", mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("+s<", "+s<", "+s<", (-2185), (-2185), (-2185), 20, (Coordinate) null, false, 802, list0);
      umCarroJa0.registarVeiculo(veiculo1);
      // Undeclared exception!
      try { 
        umCarroJa0.toStringVeiculo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.respostaProp(false, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarVeiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.registaAluguer(aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2185, 2185, 473, 473, 0, 1786);
      // Undeclared exception!
      try { 
        umCarroJa0.guardarEstado((String) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.guardarEstado("Consumo: ", (GregorianCalendar) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getUserNIF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getEmailUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculoJa("J", 473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2021161078), (-1672), (-723), (-1672), 1178, 1682);
      Aluguer aluguer0 = new Aluguer("or*0=<", "P9Ehknp_", (GregorianCalendar) null, mockGregorianCalendar0, 1.0, 1169, 878, (Coordinate) null, (-723), false, false, false, false, 1682);
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculo(aluguer0, 4182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Utilizador utilizador0 = new Utilizador();
      umCarroJa0.registarUtilizador(utilizador0);
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, 849);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Cliente
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-5044.4039391087), (-5044.4039391087));
      try { 
        umCarroJa0.maisBarato(coordinate0, (ParDatas) null, (-1562));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.getAlugueresProp("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getUtilizador((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setEmail("dg@%(n#");
      umCarroJa0.registarUtilizador(cliente0);
      Cliente cliente1 = (Cliente)umCarroJa0.getUtilizador("dg@%(n#");
      assertEquals(0, cliente1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      String string0 = umCarroJa0.toStringVeiculo();
      assertEquals("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringVeiculo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2185, 2185, 476, 476, 0, 1786);
      Coordinate coordinate0 = new Coordinate(4.0, 0);
      Cliente cliente0 = new Cliente("=dk$V", (String) null, (String) null, "J", (String) null, mockGregorianCalendar0, coordinate0, 27, 1786, 1846.531395060076);
      umCarroJa0.registarUtilizador(cliente0);
      String string0 = umCarroJa0.toStringUser();
      assertEquals("*****    UTILIZADOR    *****\nNome: =dk$V\nNIF: null\nEmail: null\nPassword: J\nMorada: null\nData de Nascimento: 9/6/2368\nPosi\u00E7\u00E3o em que o cliente se encontra: 4, 0\nClassifica\u00E7\u00E3o do cliente: 27\nN\u00FAmero de alugueres efetuados: 1786\nN\u00FAmero de Km percorridos: 1846.531395060076\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringAlugs();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNAlugs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(759);
      cliente0.setEmail("dg@%(n#");
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.classificarClienteJa("dg@%(n#", 1678);
      assertEquals("", umCarroJa0.getEmailUser());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisBaratoJa((Coordinate) null, parDatas0, ".Xk");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresCliente((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o efetuou nenhum aluguer.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-366.67858), (-366.67858));
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.veiculoEspecifico(coordinate0, parDatas0, "2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 2
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(1100.0, 1100.0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisProximo(coordinate0, parDatas0, (-1601));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      umCarroJa0.alugueresEfetuados(mockGregorianCalendar0);
      assertEquals("", umCarroJa0.getEmailUser());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.alugueresClassificarVeiculo();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      // Undeclared exception!
      try { 
        umCarroJa0.determinarListaAlugCli("3", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.determinarListaAlugCli("e", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.altPrecoKm("ol9n '#H1n(s^WzU", 12);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ol9n '#H1n(s^WzU
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.abastecerVeiculo("G|cK{=vl% 6XN#Dv3", 34.75426031191218);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // G|cK{=vl% 6XN#Dv3
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.sinalizarDisponibilidade((String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      try { 
        umCarroJa0.registarVeiculo(veiculo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      boolean boolean0 = umCarroJa0.existeVeiculo("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeVeiculo("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      Utilizador utilizador0 = new Utilizador(cliente0);
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesAlugueres();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      List<Cliente> list0 = umCarroJa0.get10ClientesAlugueres();
      assertTrue(list0.contains(cliente0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      Utilizador utilizador0 = new Utilizador(cliente0);
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesKm();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      List<Cliente> list0 = umCarroJa0.get10ClientesKm();
      assertTrue(list0.contains(cliente0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresVeiculo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      boolean boolean0 = umCarroJa0.existeUtilizador("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeUtilizador((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      try { 
        umCarroJa0.iniciarSessao("", "oi~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // oi~
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.iniciarSessao("", "");
      assertEquals(0, umCarroJa0.getNVeiculos());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.iniciarSessao("TIQZ", "Classifica\u00E7\u00E3o: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // TIQZ
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      try { 
        umCarroJa0.registarUtilizador(cliente0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      cliente0.setEmail("dg@%(n#");
      umCarroJa0.registarUtilizador(cliente0);
      umCarroJa0.classificarClienteJa("dg@%(n#", 1678);
      assertEquals(0, umCarroJa0.getNVeiculos());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.classificarClienteJa("", 774);
      assertEquals("", umCarroJa0.getUserNIF());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNUsers();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Aluguer aluguer0 = new Aluguer("", "\n", mockGregorianCalendar0, mockGregorianCalendar0, (-3477.2854694), 0, 0, (Coordinate) null, 0, true, true, true, true, 0);
      // Undeclared exception!
      try { 
        umCarroJa0.altPrecoAluguer((-3477.2854694), aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getEmailUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosCliente("", (Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      try { 
        umCarroJa0.guardarEstado("", mockGregorianCalendar0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNVeiculos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Cliente
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 2263.4201);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.determinadaAutonomia(coordinate0, parDatas0, 2, 2, (-57));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getUserNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.determinarListaEspera((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0, 3);
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosAutonomiaVeiculo("[k-awkL|", coordinate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }
}
