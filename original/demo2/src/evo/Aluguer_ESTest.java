/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 19:18:35 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aluguer_ESTest extends Aluguer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer0.setEstadoClassificacao(1373);
      aluguer0.equals(aluguer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 920, 0, 0, 0);
      Coordinate coordinate0 = new Coordinate(0, (-89.36846124394133));
      Aluguer aluguer0 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, 52, coordinate0, 920, true, true, true, true, 0);
      Aluguer aluguer1 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, 0, coordinate0, 0, true, false, true, false, 0);
      aluguer0.equals(aluguer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1189, 1189, 913, (-582), (-768), 0);
      Aluguer aluguer0 = new Aluguer();
      Coordinate coordinate0 = aluguer0.getDestino();
      Aluguer aluguer1 = new Aluguer("Coordinate", "w", mockGregorianCalendar0, mockGregorianCalendar0, 1189, 0, 52, coordinate0, (-768), true, true, true, false, 1189);
      Aluguer aluguer2 = new Aluguer("Coordinate", "w", mockGregorianCalendar0, mockGregorianCalendar0, 1189, 1189, 2146673852, coordinate0, 0, true, true, true, false, 1189);
      aluguer1.equals(aluguer2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate(0.0, 996.1227436304799);
      Aluguer aluguer0 = new Aluguer("Y5\"%2q/SeV*TUR", "", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 0, 2533, coordinate0, 0.0, false, false, false, true, (-1454));
      aluguer0.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1113.312), (-1113.312));
      Aluguer aluguer0 = new Aluguer("", "P6<JgB>c", (GregorianCalendar) null, (GregorianCalendar) null, (-1113.312), (-7), (-7), coordinate0, (-7), false, true, false, false, 1020);
      aluguer0.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1324, 1007, 750, 1007, 1047, 1047);
      Coordinate coordinate0 = new Coordinate(1047, 1324);
      Aluguer aluguer0 = new Aluguer("C]D$mV:;D", "C]D$mV:;D", mockGregorianCalendar0, mockGregorianCalendar0, 1324, 1007, 1007, coordinate0, 922.573995229, true, false, true, false, (-916));
      aluguer0.getTempoAteVeiculo();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1820), (-1820), (-1820), (-1820), (-1820), (-911));
      Coordinate coordinate0 = new Coordinate(0.0, (-911));
      Aluguer aluguer0 = new Aluguer("Estado da classifica\u00E7\u00E3o: ", "B", mockGregorianCalendar0, mockGregorianCalendar0, (-1820), (-1820), (-4864), coordinate0, (-4864), false, false, true, false, (-4864));
      aluguer0.getTempoAteVeiculo();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1189, 1189, 913, (-582), (-768), 0);
      Aluguer aluguer0 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 0, 913, (Coordinate) null, (-89.0418), true, true, true, true, (-3201));
      aluguer0.getRealizado();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2897, (-3948), 1);
      Coordinate coordinate0 = new Coordinate(1, (-3948));
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 1, (-3948), 1, coordinate0, 0.0, true, false, false, true, 0);
      aluguer0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(922.0332303876, 0);
      Aluguer aluguer0 = new Aluguer("Aluguer", "q^HlE;jA", (GregorianCalendar) null, (GregorianCalendar) null, 99.28675596504, 0, 0, coordinate0, 99.28675596504, true, true, true, false, 0);
      aluguer0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-971), (-971), (-971), (-971), 0, 0);
      Coordinate coordinate0 = new Coordinate(0, 0);
      Aluguer aluguer0 = new Aluguer("*****    ALUGUER    *****\n", "", mockGregorianCalendar0, mockGregorianCalendar0, 0, 2673, 0, coordinate0, 2673, true, true, true, true, 2673);
      aluguer0.getListaEspera();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(4239);
      aluguer0.getEstadoClassificacao();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate(0.0, 996.1227436304799);
      Aluguer aluguer0 = new Aluguer("Y5\"%2q/SeV*TUR", "", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 0, 2533, coordinate0, 0.0, false, false, false, true, (-1454));
      aluguer0.getEstadoClassificacao();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate((-3009.55), 0.0);
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 1, (-1), coordinate0, 0.0, false, false, true, true, 4007);
      aluguer0.getEmail();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-90.0000");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Coordinate coordinate0 = new Coordinate((-1956.5381168437575), (-1514));
      Aluguer aluguer0 = new Aluguer("-90.0000", "-90.0000", mockGregorianCalendar0, mockGregorianCalendar0, (-1.0), (-1514), 1, coordinate0, 793.895499, true, true, true, true, 2122647821);
      aluguer0.getEmail();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(922.0332303876, 0);
      Aluguer aluguer0 = new Aluguer("Aluguer", "q^HlE;jA", (GregorianCalendar) null, (GregorianCalendar) null, 99.28675596504, 0, 0, coordinate0, 99.28675596504, true, true, true, false, 0);
      aluguer0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(0.0, 2442.0);
      Aluguer aluguer0 = new Aluguer("Matr\u00EDcula do Ve\u00EDculo: ", "*Ad.Cb+k*<rH7+S", mockGregorianCalendar0, mockGregorianCalendar0, (-2998.26), (-1), (-1), coordinate0, (-2998.26), true, false, false, true, (-1919));
      aluguer0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Aluguer aluguer0 = new Aluguer("", ",{)GgTX*\"PxjOKPrs!", mockGregorianCalendar0, mockGregorianCalendar0, 1116.98, (-793), 357, (Coordinate) null, 1116.98, true, true, true, true, 89);
      aluguer0.getDestino();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1503, 1503, 1503);
      Coordinate coordinate0 = new Coordinate(1.0, 1503);
      Aluguer aluguer0 = new Aluguer("Qf'hH>cI8TWyrC", "Qf'hH>cI8TWyrC", mockGregorianCalendar0, mockGregorianCalendar0, 1503, 1503, (-1), coordinate0, 1.0, true, true, true, false, (-1));
      aluguer0.getDestino();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-2454), (-3617.34156));
      Aluguer aluguer0 = new Aluguer("##.######", "##.######", mockGregorianCalendar0, mockGregorianCalendar0, 1.0, (-2454), 2195, coordinate0, 1.0, true, true, true, true, (-2454));
      aluguer0.getDestino();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(922.0332303876, 0);
      Aluguer aluguer0 = new Aluguer("Aluguer", "q^HlE;jA", (GregorianCalendar) null, (GregorianCalendar) null, 99.28675596504, 0, 0, coordinate0, 99.28675596504, true, true, true, false, 0);
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      Coordinate coordinate0 = new Coordinate((-2454), (-3617.34156));
      Aluguer aluguer0 = new Aluguer("##.######", "##.######", mockGregorianCalendar0, mockGregorianCalendar0, 1.0, (-2454), 2195, coordinate0, 1.0, true, true, true, true, (-2454));
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, (-1932735280), 161, 1000, (-1932735280));
      Coordinate coordinate0 = new Coordinate(1000, 1.0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1932735280));
      Aluguer aluguer0 = new Aluguer("F0@JZ&|PTT0wh>jwJ", "Estado da classifica\u00E7\u00E3o: ", mockGregorianCalendar0, mockGregorianCalendar0, (-1932735280), (-1932735280), 1, coordinate0, 0L, false, false, false, false, 1);
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      Coordinate coordinate0 = new Coordinate(0.0, 996.1227436304799);
      Aluguer aluguer0 = new Aluguer("Y5\"%2q/SeV*TUR", "", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, 0, 2533, coordinate0, 0.0, false, false, false, true, (-1454));
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      gregorianCalendar0.setFirstDayOfWeek((-358));
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate((-1), (-1));
      mockGregorianCalendar0.setLenient(false);
      Aluguer aluguer0 = new Aluguer("Pre\u00E7o modificado pelo propriet\u00E1rio do ve\u00EDculo: ", "Pre\u00E7o modificado pelo propriet\u00E1rio do ve\u00EDculo: ", mockGregorianCalendar0, mockGregorianCalendar0, (-1664.0), (-1), (-1), coordinate0, (-1), true, false, true, true, (-1));
      aluguer0.getDataFim();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3222), (-3222), (-3222));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-3222));
      Aluguer aluguer0 = new Aluguer("A", "A", mockGregorianCalendar0, mockGregorianCalendar0, (-3222), (-3222), (-3222), (Coordinate) null, (-3222), true, true, true, true, (-3222));
      aluguer0.getDataFim();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3435), (-3435), (-2146673852));
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      
      mockGregorianCalendar0.setFirstDayOfWeek((-2146673852));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-2146673852), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-2146673852,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3435,MONTH=-3435,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2146673852,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Aluguer aluguer0 = new Aluguer("x{*", "98.0000", mockGregorianCalendar0, mockGregorianCalendar0, (-3435), (-2146673852), (-2146673852), coordinate0, 0.0, true, true, true, true, (-2145332901));
      assertNotNull(aluguer0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-2146673852), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-2146673852,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3435,MONTH=-3435,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2146673852,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2146673852), aluguer0.getTempoViagem());
      assertEquals((-2146673852), aluguer0.getTempoAteVeiculo());
      assertEquals("98.0000", aluguer0.getMatricula());
      assertEquals((-3435.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("x{*", aluguer0.getEmail());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-2145332901), aluguer0.getEstadoClassificacao());
      
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataFim();
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
      assertNotNull(gregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-2146673852), mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-2146673852,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3435,MONTH=-3435,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2146673852,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals((-2146673852), aluguer0.getTempoViagem());
      assertEquals((-2146673852), aluguer0.getTempoAteVeiculo());
      assertEquals("98.0000", aluguer0.getMatricula());
      assertEquals((-3435.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("x{*", aluguer0.getEmail());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-2145332901), aluguer0.getEstadoClassificacao());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-2146673852,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3435,MONTH=-3435,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2146673852,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
      assertEquals((-2146673852), gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      aluguer0.setCustoViagem(1.0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      aluguer0.setCustoViagem((-4072.1743375));
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-4072.1743375), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals((-4072.1743375), double0, 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-4072.1743375), aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      aluguer0.setAlteraPreco(true);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertTrue(boolean0);
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      
      aluguer0.setAceite(true);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      
      boolean boolean0 = aluguer0.getAceite();
      assertTrue(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-927.41), (-927.41));
      assertNotNull(coordinate0);
      assertEquals((-927.41), coordinate0.getLatitude(), 0.01);
      assertEquals((-927.41), coordinate0.getLongitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("sgg@1#,8Y", "[AanACvq", mockGregorianCalendar0, mockGregorianCalendar0, (-927.41), 1642, 1642, coordinate0, (-919.96495640775), true, true, true, true, 0);
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-927.41), coordinate0.getLatitude(), 0.01);
      assertEquals((-927.41), coordinate0.getLongitude(), 0.01);
      assertEquals((-919.96495640775), aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getRealizado());
      assertEquals((-927.41), aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals(1642, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("[AanACvq", aluguer0.getMatricula());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1642, aluguer0.getTempoViagem());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-927.41), coordinate0.getLatitude(), 0.01);
      assertEquals((-927.41), coordinate0.getLongitude(), 0.01);
      assertEquals((-919.96495640775), aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getRealizado());
      assertEquals((-927.41), aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertEquals(1642, aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("[AanACvq", aluguer0.getMatricula());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1642, aluguer0.getTempoViagem());
      assertTrue(aluguer1.getListaEspera());
      assertTrue(aluguer1.getRealizado());
      assertEquals("[AanACvq", aluguer1.getMatricula());
      assertEquals(1642, aluguer1.getTempoAteVeiculo());
      assertEquals((-927.41), aluguer1.getCustoViagem(), 0.01);
      assertEquals(1642, aluguer1.getTempoViagem());
      assertEquals((-919.96495640775), aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertTrue(aluguer1.getAceite());
      assertTrue(aluguer1.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1147), (-1));
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate((-1), 0.0);
      assertNotNull(coordinate0);
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("", "Q[", mockGregorianCalendar0, mockGregorianCalendar0, (-1147), (-1), (-1), coordinate0, 1.0, true, true, true, true, (-1147));
      assertNotNull(aluguer0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1147,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-1147.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals("Q[", aluguer0.getMatricula());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-1147), aluguer0.getEstadoClassificacao());
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-1), aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertEquals((-1), aluguer0.getTempoAteVeiculo());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1147,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-1147.0), aluguer0.getCustoViagem(), 0.01);
      assertEquals("Q[", aluguer0.getMatricula());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-1147), aluguer0.getEstadoClassificacao());
      assertEquals(1.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-1), aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertEquals((-1), aluguer0.getTempoAteVeiculo());
      assertTrue(aluguer1.getAceite());
      assertEquals(1.0, aluguer1.getDistancia(), 0.01);
      assertEquals((-1147.0), aluguer1.getCustoViagem(), 0.01);
      assertTrue(aluguer1.getRealizado());
      assertEquals((-1), aluguer1.getTempoAteVeiculo());
      assertEquals("Q[", aluguer1.getMatricula());
      assertEquals((-1), aluguer1.getTempoViagem());
      assertTrue(aluguer1.getListaEspera());
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals((-1147), aluguer1.getEstadoClassificacao());
      assertEquals("", aluguer1.getEmail());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1113.312), (-1113.312));
      assertNotNull(coordinate0);
      assertEquals((-1113.312), coordinate0.getLongitude(), 0.01);
      assertEquals((-1113.312), coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer("", "P6<JgB>c", (GregorianCalendar) null, (GregorianCalendar) null, (-1113.312), (-7), (-7), coordinate0, (-7), false, true, false, false, 1020);
      assertNotNull(aluguer0);
      assertEquals((-1113.312), coordinate0.getLongitude(), 0.01);
      assertEquals((-1113.312), coordinate0.getLatitude(), 0.01);
      assertEquals(1020, aluguer0.getEstadoClassificacao());
      assertEquals((-7.0), aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals((-7), aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-7), aluguer0.getTempoAteVeiculo());
      assertEquals("P6<JgB>c", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-1113.312), aluguer0.getCustoViagem(), 0.01);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertNotNull(aluguer1);
      assertEquals((-1113.312), coordinate0.getLongitude(), 0.01);
      assertEquals((-1113.312), coordinate0.getLatitude(), 0.01);
      assertEquals(1020, aluguer0.getEstadoClassificacao());
      assertEquals((-7.0), aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals((-7), aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals((-7), aluguer0.getTempoAteVeiculo());
      assertEquals("P6<JgB>c", aluguer0.getMatricula());
      assertTrue(aluguer0.getListaEspera());
      assertEquals((-1113.312), aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer1.getListaEspera());
      assertEquals((-1113.312), aluguer1.getCustoViagem(), 0.01);
      assertEquals((-7), aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("P6<JgB>c", aluguer1.getMatricula());
      assertEquals(1020, aluguer1.getEstadoClassificacao());
      assertEquals((-7.0), aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals((-7), aluguer1.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      
      aluguer0.setCustoViagem(85.4671703);
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(85.4671703, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(85.4671703, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(85.4671703, aluguer1.getCustoViagem(), 0.01);
      
      aluguer0.setCustoViagem(0.0);
      assertNotSame(aluguer0, aluguer1);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(boolean0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(85.4671703, aluguer1.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      aluguer0.setAceite(true);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2897, (-3948), 1);
      assertNotNull(mockGregorianCalendar0);
      
      Coordinate coordinate0 = new Coordinate(1, (-3948));
      assertNotNull(coordinate0);
      assertEquals((-3948.0), coordinate0.getLongitude(), 0.01);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 1, (-3948), 1, coordinate0, 0.0, true, false, false, true, 0);
      assertNotNull(aluguer0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2897,MONTH=-3948,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-3948.0), coordinate0.getLongitude(), 0.01);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertNull(aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1, aluguer0.getTempoViagem());
      assertEquals((-3948), aluguer0.getTempoAteVeiculo());
      assertNull(aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertNotNull(aluguer1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2897,MONTH=-3948,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-3948.0), coordinate0.getLongitude(), 0.01);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertEquals(1.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertNull(aluguer0.getMatricula());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals(1, aluguer0.getTempoViagem());
      assertEquals((-3948), aluguer0.getTempoAteVeiculo());
      assertNull(aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertTrue(aluguer1.getAceite());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(1.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals((-3948), aluguer1.getTempoAteVeiculo());
      assertTrue(aluguer1.getAlteraPreco());
      assertNull(aluguer1.getMatricula());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(1, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getRealizado());
      assertNull(aluguer1.getEmail());
      
      // Undeclared exception!
      try { 
        aluguer0.equals(aluguer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Aluguer aluguer0 = null;
      try {
        aluguer0 = new Aluguer((Aluguer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Aluguer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      
      boolean boolean0 = aluguer0.getAlteraPreco();
      assertFalse(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      int int0 = aluguer0.getTempoViagem();
      assertEquals(0, int0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      String string0 = aluguer0.getEmail();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      
      int int0 = aluguer0.getTempoAteVeiculo();
      assertEquals(0, int0);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      
      String string0 = aluguer0.getMatricula();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      boolean boolean0 = aluguer0.getRealizado();
      assertFalse(boolean0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      
      int int0 = aluguer0.getEstadoClassificacao();
      assertEquals(0, int0);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      double double0 = aluguer0.getCustoViagem();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      
      boolean boolean0 = aluguer0.getAceite();
      assertFalse(boolean0);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      
      boolean boolean0 = aluguer0.getListaEspera();
      assertFalse(boolean0);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      
      double double0 = aluguer0.getDistancia();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      Aluguer aluguer1 = new Aluguer();
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      
      aluguer1.setEstadoClassificacao(1759);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(1759, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(boolean0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(1759, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      
      aluguer1.setAlteraPreco(true);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(boolean0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertFalse(aluguer1.getListaEspera());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getRealizado());
      assertFalse(aluguer1.getAceite());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      
      aluguer0.setRealizado(true);
      assertNotSame(aluguer0, aluguer1);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(boolean0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      Aluguer aluguer1 = aluguer0.clone();
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertTrue(boolean0);
      assertTrue(aluguer0.equals((Object)aluguer1));
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getRealizado());
      assertEquals("", aluguer1.getMatricula());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      
      Aluguer aluguer1 = new Aluguer(aluguer0);
      assertTrue(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAceite());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals("", aluguer1.getMatricula());
      
      aluguer1.setAceite(true);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals("", aluguer1.getMatricula());
      assertTrue(aluguer1.getAceite());
      
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer0);
      assertFalse(boolean0);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertEquals("", aluguer0.getMatricula());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertEquals("", aluguer1.getEmail());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals("", aluguer1.getMatricula());
      assertTrue(aluguer1.getAceite());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1189, 1189, 913, 1189, 1189, 0);
      assertNotNull(mockGregorianCalendar0);
      
      Aluguer aluguer0 = new Aluguer();
      assertNotNull(aluguer0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      
      Coordinate coordinate0 = aluguer0.getDestino();
      assertNotNull(coordinate0);
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      
      Aluguer aluguer1 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 1189, 0, 52, coordinate0, 913, true, true, true, true, 1189);
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertNotNull(aluguer1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1189,MONTH=1189,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=913,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1189,HOUR_OF_DAY=1189,MINUTE=1189,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(913.0, aluguer1.getDistancia(), 0.01);
      assertEquals("Coordinate", aluguer1.getMatricula());
      assertTrue(aluguer1.getAceite());
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(1189, aluguer1.getEstadoClassificacao());
      assertTrue(aluguer1.getRealizado());
      assertEquals(52, aluguer1.getTempoViagem());
      assertTrue(aluguer1.getListaEspera());
      assertEquals("Coordinate", aluguer1.getEmail());
      assertEquals(1189.0, aluguer1.getCustoViagem(), 0.01);
      
      Aluguer aluguer2 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 1189, 0, 2146673852, coordinate0, 0, true, false, true, false, 1189);
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer2.equals((Object)aluguer1));
      assertFalse(aluguer2.equals((Object)aluguer0));
      assertNotNull(aluguer2);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1189,MONTH=1189,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=913,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1189,HOUR_OF_DAY=1189,MINUTE=1189,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals("Coordinate", aluguer2.getMatricula());
      assertTrue(aluguer2.getRealizado());
      assertEquals(1189, aluguer2.getEstadoClassificacao());
      assertEquals(0, aluguer2.getTempoAteVeiculo());
      assertEquals(2146673852, aluguer2.getTempoViagem());
      assertEquals("Coordinate", aluguer2.getEmail());
      assertTrue(aluguer2.getAceite());
      assertEquals(0.0, aluguer2.getDistancia(), 0.01);
      assertFalse(aluguer2.getListaEspera());
      assertFalse(aluguer2.getAlteraPreco());
      assertEquals(1189.0, aluguer2.getCustoViagem(), 0.01);
      
      boolean boolean0 = aluguer1.equals(aluguer2);
      assertNotSame(aluguer0, aluguer2);
      assertNotSame(aluguer0, aluguer1);
      assertNotSame(aluguer1, aluguer2);
      assertNotSame(aluguer1, aluguer0);
      assertNotSame(aluguer2, aluguer1);
      assertNotSame(aluguer2, aluguer0);
      assertFalse(boolean0);
      assertFalse(aluguer0.equals((Object)aluguer2));
      assertFalse(aluguer0.equals((Object)aluguer1));
      assertFalse(aluguer1.equals((Object)aluguer2));
      assertFalse(aluguer1.equals((Object)aluguer0));
      assertFalse(aluguer2.equals((Object)aluguer1));
      assertFalse(aluguer2.equals((Object)aluguer0));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1189,MONTH=1189,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=913,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1189,HOUR_OF_DAY=1189,MINUTE=1189,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("", aluguer0.getMatricula());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals("", aluguer0.getEmail());
      assertFalse(aluguer0.getListaEspera());
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(913.0, aluguer1.getDistancia(), 0.01);
      assertEquals("Coordinate", aluguer1.getMatricula());
      assertTrue(aluguer1.getAceite());
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(1189, aluguer1.getEstadoClassificacao());
      assertTrue(aluguer1.getRealizado());
      assertEquals(52, aluguer1.getTempoViagem());
      assertTrue(aluguer1.getListaEspera());
      assertEquals("Coordinate", aluguer1.getEmail());
      assertEquals(1189.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals("Coordinate", aluguer2.getMatricula());
      assertTrue(aluguer2.getRealizado());
      assertEquals(1189, aluguer2.getEstadoClassificacao());
      assertEquals(0, aluguer2.getTempoAteVeiculo());
      assertEquals(2146673852, aluguer2.getTempoViagem());
      assertEquals("Coordinate", aluguer2.getEmail());
      assertTrue(aluguer2.getAceite());
      assertEquals(0.0, aluguer2.getDistancia(), 0.01);
      assertFalse(aluguer2.getListaEspera());
      assertFalse(aluguer2.getAlteraPreco());
      assertEquals(1189.0, aluguer2.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      Aluguer aluguer0 = new Aluguer();
      Coordinate coordinate0 = aluguer0.getDestino();
      Aluguer aluguer1 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, 0, coordinate0, 0, false, false, false, false, 0);
      Aluguer aluguer2 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 0, (-1179), 0, coordinate0, 0, false, false, false, false, 0);
      boolean boolean0 = aluguer1.equals(aluguer2);
      assertEquals(0.0, aluguer2.getCustoViagem(), 0.01);
      assertFalse(aluguer2.getAceite());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer2.getAlteraPreco());
      assertEquals((-1179), aluguer2.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer2.equals((Object)aluguer1));
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertFalse(aluguer2.getListaEspera());
      assertEquals(0, aluguer2.getTempoViagem());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer2.getDistancia(), 0.01);
      assertFalse(aluguer2.getRealizado());
      assertEquals(0, aluguer2.getEstadoClassificacao());
      assertFalse(boolean0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getRealizado());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      System.setCurrentTimeMillis(0L);
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(aluguer1.getAlteraPreco());
      assertFalse(aluguer1.getRealizado());
      assertFalse(boolean0);
      assertEquals(0, aluguer1.getTempoViagem());
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      String string0 = aluguer0.toString();
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      Coordinate coordinate0 = new Coordinate(2765, (-2330.79631));
      Aluguer aluguer1 = new Aluguer("", string0, gregorianCalendar0, gregorianCalendar0, 0, (-358), 4295, coordinate0, 4295, false, false, true, false, (-497));
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(4295, aluguer1.getTempoViagem());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals((-358), aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getListaEspera());
      assertTrue(aluguer1.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(4295.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals((-497), aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertFalse(boolean0);
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1189, 1189, 913, 1189, 1189, 0);
      Aluguer aluguer0 = new Aluguer();
      Coordinate coordinate0 = aluguer0.getDestino();
      Aluguer aluguer1 = new Aluguer("Coordinate", "Coordinate", mockGregorianCalendar0, mockGregorianCalendar0, 1189, 0, 52, coordinate0, 913, true, true, true, true, 1189);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertEquals(1189.0, aluguer1.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertTrue(aluguer1.getAceite());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
      assertTrue(aluguer1.getListaEspera());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertEquals(913.0, aluguer1.getDistancia(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(boolean0);
      assertTrue(aluguer1.getRealizado());
      assertEquals(52, aluguer1.getTempoViagem());
      assertTrue(aluguer1.getAlteraPreco());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(1189, aluguer1.getEstadoClassificacao());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(aluguer0.getAlteraPreco());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0, aluguer0.getTempoViagem());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAceite());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer0);
      assertEquals(0, aluguer0.getTempoViagem());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer0.setListaEspera(true);
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      assertTrue(aluguer0.getListaEspera());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      String string0 = aluguer0.toString();
      boolean boolean0 = aluguer0.equals(string0);
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, aluguer0.getTempoViagem());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setCustoViagem((-2146.4332));
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertEquals((-2146.4332), aluguer1.getCustoViagem(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("o0000", "o0000", (GregorianCalendar) null, (GregorianCalendar) null, 1902.0, 0, 0, (Coordinate) null, 0, false, false, false, false, 0);
      aluguer0.getDataFim();
      assertFalse(aluguer0.getAlteraPreco());
      assertFalse(aluguer0.getAceite());
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0, aluguer0.getTempoAteVeiculo());
      assertFalse(aluguer0.getRealizado());
      assertFalse(aluguer0.getListaEspera());
      assertEquals(1902.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(0.0, aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getTempoViagem());
  }
}
