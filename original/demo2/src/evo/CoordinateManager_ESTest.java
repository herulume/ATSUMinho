/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 19:37:51 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoordinateManager_ESTest extends CoordinateManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest((-1.0), 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Coordinate> hashMap0 = CoordinateManager.getBoundingBox(2.0, 0.0, 2280);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast((-1.0), (-1.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(0.0, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth((-1.0), (-1.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(90.0, (-180.0), (-1932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoordinateManager.EARTH_DIAMETER = (-3588.213420831633);
      double double0 = CoordinateManager.longitudeConstant((-2422.8031));
      assertEquals((-25.20621772824837), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CoordinateManager.EARTH_DIAMETER = (-918.137139765549);
      double double0 = CoordinateManager.latitudeConstant();
      assertEquals((-8.012258036876094), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(0.0, 111.31949079327356, 2080);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(92.63453288358751, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest((-90.0), 180.0, 1453);
      assertEquals(150.8696950491861, coordinate0.getLongitude(), 0.01);
      assertEquals((-90.0), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(0.0, 111.31949079327357, 1);
      assertEquals((-8.983152841195216E-6), coordinate0.getLatitude(), 0.01);
      assertEquals(111.31949079327357, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(2.0, (-1.0), 59);
      assertEquals(1.9994699939823695, coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth(1.0, 22.88419807027181, 1000);
      assertEquals(1.0089831528411952, coordinate0.getLatitude(), 0.01);
      assertEquals(22.88419807027181, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth(0.0, 0.0, 53);
      assertEquals(4.761071005833464E-4, coordinate0.getLatitude(), 0.01);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast(0.0, 0.0, 1);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0.008983152841195214, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast(2.0, 2.0, 3140);
      assertEquals(69.78160361711072, coordinate0.getLongitude(), 0.01);
      assertEquals(2.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(59.0, (-32.6020929700181), 692);
      assertEquals((-40.66395421464481), coordinate0.getLongitude(), 0.01);
      assertEquals(59.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast((-26.519068263670103), (-26.519068263670103), 12);
      assertEquals((-25.931373461450203), coordinate0.getLongitude(), 0.01);
      assertEquals((-26.519068263670103), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(0.0, 0.0, 53);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-4.761071005833464E-4), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth((-75.4045045847554), (-75.4045045847554), 1044);
      assertEquals((-75.4045045847554), coordinate0.getLongitude(), 0.01);
      assertEquals((-75.3951261731892), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude((-3293.791039253954));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude(85.36956613741728);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude(3140);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = CoordinateManager.longitudeConstant((-1.0));
      assertEquals(60.146177563672865, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = CoordinateManager.latitudeConstant();
      assertEquals(111.31949079327356, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(3.141592653589793, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(19, 3319.124863141, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(368.915886824, 0.0, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest((-26.519068263670103), (-26.519068263670103), (-914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest(45.43280790088605, 1685.490768423098, 3388);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest(4069.8, (-3742.139351), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast((-28), (-28), (-28));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(0.0, 1727.1175021026372, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast((-2134394497), (-2134394497), (-2134394497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth((-9), (-9), (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(0.0, (-1918.3366123), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth((-32), (-32), (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(3942.6287313080097, 972.967656629, (-1075));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude(697.87071319086);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth((-63.55130978114186), (-2148.8139073), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(923, (-56.70168332392277), 923);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude((-1828.096701652));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CoordinateManager coordinateManager0 = new CoordinateManager();
      assertEquals(90.0, CoordinateManager.MAX_LATITUDE, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, Coordinate> hashMap0 = CoordinateManager.getBoundingBox((-56.70168332392277), (-56.70168332392277), 923);
      assertFalse(hashMap0.isEmpty());
  }
}
