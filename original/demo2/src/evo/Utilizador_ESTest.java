/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 19:30:16 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 961, (-597));
      Utilizador utilizador0 = new Utilizador("\"C", "\"C", (String) null, (String) null, "", mockGregorianCalendar0);
      String string0 = utilizador0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("#iqR71zCwZqE@rW}(0l");
      String string0 = utilizador0.getPassword();
      assertEquals("#iqR71zCwZqE@rW}(0l", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome((String) null);
      String string0 = utilizador0.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1087, 0, 1087);
      Utilizador utilizador0 = new Utilizador("", "", "dmBMWNh*zQcCPJ:Gi_", "^6[A+", "", mockGregorianCalendar0);
      utilizador0.setNome("dmBMWNh*zQcCPJ:Gi_");
      String string0 = utilizador0.getNome();
      assertEquals("dmBMWNh*zQcCPJ:Gi_", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNIF((String) null);
      String string0 = utilizador0.getNIF();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNIF("\"bG>[#j<1.");
      String string0 = utilizador0.getNIF();
      assertEquals("\"bG>[#j<1.", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      String string0 = utilizador0.getMorada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Z@#f.Piohy'a,%pJ-", "", "Z@#f.Piohy'a,%pJ-", "7oY2$ngcj", "Z@#f.Piohy'a,%pJ-", (GregorianCalendar) null);
      String string0 = utilizador0.getMorada();
      assertEquals("Z@#f.Piohy'a,%pJ-", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail((String) null);
      String string0 = utilizador0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      Utilizador utilizador0 = new Utilizador("", "", "X Z4r] /", "", "", mockGregorianCalendar0);
      String string0 = utilizador0.getEmail();
      assertEquals("X Z4r] /", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setDataNasc((GregorianCalendar) null);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertNull(gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-829), (-113), (-829), (-1774), 0, 1);
      mockGregorianCalendar0.setLenient(false);
      utilizador0.setDataNasc(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertFalse(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, (-1610612734), (-1610612734), 2, 0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      Utilizador utilizador0 = new Utilizador(" U!", " U!", "", "3,KH[jUhRwfA\"^o-3S", "", mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertSame(mockGregorianCalendar0, gregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-829), (-829), (-829), (-1759), (-829), 1);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1759));
      utilizador0.setDataNasc(mockGregorianCalendar0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertTrue(gregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1087, 0, 1087);
      Utilizador utilizador0 = new Utilizador("", "", "dmBMWNh*zQcCPJ:Gi_", "^6[A+", "", mockGregorianCalendar0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertSame(gregorianCalendar0, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1610612734), (-1610612734), (-1), (-1), (-2136379634));
      Utilizador utilizador0 = new Utilizador("0,6h4njyvBeRAPpWa(", "0,6h4njyvBeRAPpWa(", "Gd`g.&NR.|x]TY", "Gd`g.&NR.|x]TY", "Gd`g.&NR.|x]TY", mockGregorianCalendar0);
      mockGregorianCalendar0.setFirstDayOfWeek((-2136379634));
      GregorianCalendar gregorianCalendar0 = utilizador0.getDataNasc();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-2136379634,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1610612734,MONTH=-1610612734,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-2136379634,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", gregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("q/O-:", "q/O-:", "", "", "q/O-:", (GregorianCalendar) null);
      // Undeclared exception!
      try { 
        utilizador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-829), (-113), (-829), (-1774), 0, 1);
      mockGregorianCalendar0.setLenient(false);
      utilizador0.setDataNasc(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        utilizador0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome((String) null);
      Utilizador utilizador1 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getMorada();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      System.setCurrentTimeMillis((-828L));
      Utilizador utilizador1 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setPassword("/#");
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1658), (-1658), (-1658), (-1658), (-1658));
      Utilizador utilizador0 = new Utilizador("k|57^|", "k|57^|", "k|57^|", "i4>e", "i4>e", mockGregorianCalendar0);
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setEmail("i4>e");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setNome("j");
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("q/O-:", "q/O-:", "", "", "q/O-:", (GregorianCalendar) null);
      boolean boolean0 = utilizador0.equals("q/O-:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1658), (-1658), (-1658), (-1658), (-1658));
      Utilizador utilizador0 = new Utilizador("k|57^|", "k|57^|", "k|57^|", "i4>e", "i4>e", mockGregorianCalendar0);
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNIF("\"bG>[#j<1.");
      Utilizador utilizador1 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada("_");
      Utilizador utilizador1 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\n", string0);
  }
}
