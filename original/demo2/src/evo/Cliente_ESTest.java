/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 19:37:03 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cliente_ESTest extends Cliente_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      assertEquals(0.0, cliente1.getNKm(), 0.01);
      
      cliente1.setNKM(1.0);
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente0.setNAlugueres((-1334));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-1334), cliente0.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente0.setClassificacao(160);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(160, cliente0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente0);
      assertTrue(boolean0);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate(225.3034, 225.3034);
      cliente0.setPosicao(coordinate0);
      cliente0.getPosicao();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate((-2297.65), (-2297.65));
      Cliente cliente0 = new Cliente("0\"+_", "0\"+_", "", "0\"+_", "", mockGregorianCalendar0, coordinate0, 0, 0, 0);
      cliente0.getPosicao();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2006), (-2006), 2166);
      Coordinate coordinate0 = new Coordinate((-1301.676959), (-1301.676959));
      Cliente cliente0 = new Cliente("kHGD", "kHGD", ", ", ", ", "NIF: ", mockGregorianCalendar0, coordinate0, (-2006), (-2006), 2166);
      double double0 = cliente0.getNKm();
      assertEquals(2166.0, double0, 0.01);
      assertEquals((-2006), cliente0.getNAlugueres());
      assertEquals((-2006), cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3212, (-538), 0, 3212, (-257), 3212);
      Coordinate coordinate0 = new Coordinate(2.0, 3212);
      Cliente cliente0 = new Cliente("", "", "", "_kZvVDmycl4", "", mockGregorianCalendar0, coordinate0, 0, 0, (-257));
      double double0 = cliente0.getNKm();
      assertEquals((-257.0), double0, 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(809);
      int int0 = cliente0.getNAlugueres();
      assertEquals(809, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres((-35));
      int int0 = cliente0.getNAlugueres();
      assertEquals((-35), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao(160);
      int int0 = cliente0.getClassificacao();
      assertEquals(160, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-556), (-556), 1, 0, (-3896), 0);
      Coordinate coordinate0 = new Coordinate(0.0, 557.9216455000052);
      Cliente cliente0 = new Cliente("", "", "", (String) null, "NIF: ", mockGregorianCalendar0, coordinate0, (-556), (-3896), (-1590.9607262063757));
      Cliente cliente1 = cliente0.clone();
      assertEquals((-3896), cliente0.getNAlugueres());
      assertEquals((-556), cliente1.getClassificacao());
      assertEquals((-1590.9607262063757), cliente1.getNKm(), 0.01);
      assertEquals((-1590.9607262063757), cliente0.getNKm(), 0.01);
      assertEquals((-556), cliente0.getClassificacao());
      assertEquals((-3896), cliente1.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2006), (-2006), 2166);
      Coordinate coordinate0 = new Coordinate((-1301.676959), (-1301.676959));
      Cliente cliente0 = new Cliente("kHGD", "kHGD", ", ", ", ", "NIF: ", mockGregorianCalendar0, coordinate0, (-2006), (-2006), 2166);
      cliente0.setNAlugueres(2166);
      cliente0.clone();
      assertEquals(2166, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-617), 1147, 0);
      Coordinate coordinate0 = new Coordinate(1213.0, 0.0);
      Cliente cliente0 = new Cliente("##.######", "GU].$n4E)", "##.######", "##.######", "GU].$n4E)", mockGregorianCalendar0, coordinate0, 2952, 0, 2952);
      Cliente cliente1 = cliente0.clone();
      assertEquals(2952.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente1.getNAlugueres());
      assertEquals(2952, cliente1.getClassificacao());
      assertEquals(2952, cliente0.getClassificacao());
      assertEquals(2952.0, cliente1.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setDataNasc((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(514, 2132360523, 514, 514, 87);
      mockGregorianCalendar0.setLenient(false);
      Coordinate coordinate0 = new Coordinate(2132360523, 514);
      Cliente cliente0 = new Cliente("Classifica\u00E7\u00E3o do cliente: ", "Classifica\u00E7\u00E3o do cliente: ", (String) null, "CoordinateManager", "CoordinateManager", mockGregorianCalendar0, coordinate0, (-1597), 536, 0L);
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1334), 0, 0, 3160, (-1));
      Cliente cliente0 = new Cliente("", "", "", "", "", mockGregorianCalendar0, (Coordinate) null, (-2616), 2558, (-2616));
      // Undeclared exception!
      try { 
        cliente0.getPosicao();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0);
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Cliente cliente0 = new Cliente("", "", (String) null, (String) null, "", mockGregorianCalendar0, coordinate0, 1, 0, (-2831.392373));
      Cliente cliente1 = new Cliente(cliente0);
      // Undeclared exception!
      try { 
        cliente1.equals(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cliente cliente0 = new Cliente("08qK3 /vEkz", "0ra*_:", "~ytX3b}4qp.hMxFQ", "~ytX3b}4qp.hMxFQ", "Kl", (GregorianCalendar) null, (Coordinate) null, (-1370), (-1370), (-2381.305));
      // Undeclared exception!
      try { 
        cliente0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setPosicao((Coordinate) null);
      Cliente cliente1 = null;
      try {
        cliente1 = new Cliente(cliente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = cliente0.getPosicao();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      double double0 = cliente0.getNKm();
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getNAlugueres();
      assertEquals(0, int0);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getClassificacao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, int0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente1.setNKM(894);
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(894.0, cliente1.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente0.setNAlugueres(894);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(894, cliente0.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente1.setClassificacao(1000);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(1000, cliente1.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate(225.3034, 225.3034);
      cliente0.setPosicao(coordinate0);
      Cliente cliente1 = cliente0.clone();
      assertTrue(cliente1.equals((Object)cliente0));
      
      coordinate0.setLongitude(1.0);
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(cliente1.equals((Object)cliente0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente1.setEmail("Utilizador");
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(cliente1.equals((Object)cliente0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 907);
      Coordinate coordinate0 = new Coordinate(0, 0);
      Cliente cliente0 = new Cliente("", "l{7_>g;n", "ts%++youyE/yIjhe", "ts%++youyE/yIjhe", "P,(Y\"", mockGregorianCalendar0, coordinate0, 907, (-2865), 1.0);
      boolean boolean0 = cliente0.equals((Object) null);
      assertEquals(907, cliente0.getClassificacao());
      assertEquals((-2865), cliente0.getNAlugueres());
      assertEquals(1.0, cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Object object0 = new Object();
      boolean boolean0 = cliente0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao((-442));
      int int0 = cliente0.getClassificacao();
      assertEquals((-442), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      String string0 = cliente0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      boolean boolean0 = cliente1.equals(cliente0);
      assertTrue(boolean0);
      assertEquals(0.0, cliente1.getNKm(), 0.01);
      assertEquals(0, cliente1.getNAlugueres());
      assertEquals(0, cliente1.getClassificacao());
  }
}
