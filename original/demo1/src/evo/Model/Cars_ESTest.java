/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 15:58:22 GMT 2020
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Cars;
import Model.Owner;
import Utils.Point;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cars_ESTest extends Cars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double((-85.49284383597));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Car.CarType car_CarType0 = Car.CarType.gas;
      try { 
        cars0.getCar("MaisBarato", point1, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double((-2197.627876));
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Car.CarType car_CarType0 = Car.CarType.any;
      try { 
        cars0.getCar("MaisPerto", point1, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("4p-q9l4j(pk{g", ", ", "4< W`jmG9Cls", (-4799), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-2331.9700852));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("4< W`jmG9Cls", owner0, car_CarType0, (-4799), 0.0, 4963.9172528069, (-4799), point0, ", ");
      cars0.addCar(car0);
      ArrayList<Car> arrayList0 = cars0.listOfCarType(car_CarType0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("O carro necessita de ser abastecido\n", "UIN8L", "UIN8L", (-1607), "UIN8L");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(2345);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("O carro necessita de ser abastecido\n", owner0, car_CarType0, 1017.282596122, 1017.282596122, (-1607), 2345, point0, "}\"}:RqOhAdbXz9");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, point0, 1017.282596122, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner((String) null, "`~44EV", "=v", (-1732335195), "=v");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-1607.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("`~44EV", owner0, car_CarType0, (-1732335195), (-1732335195), (-1607.0), 100, point0, "`~44EV");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, 100, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      // Undeclared exception!
      try { 
        cars0.getCar((String) null, point0, point0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = Double.valueOf(1122.24200999);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("<FMQv:>!\"ah'uN?", "<FMQv:>!\"ah'uN?", "<FMQv:>!\"ah'uN?", (-1524), "<FMQv:>!\"ah'uN?");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car((String) null, owner0, car_CarType0, 1122.24200999, 1122.24200999, (-1524), (-1524), (Point) null, "<FMQv:>!\"ah'uN?");
      cars0.addCar(car0);
      // Undeclared exception!
      try { 
        cars0.getCar(point0, (Point) null, (-1524), car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(100.0);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("pW3&+wum|W`f^,K", "(100.00, 2658.32)", "", 0, "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("", owner0, car_CarType0, 2658.324530148399, (-1003.599), 100.0, 0, (Point) null, "(100.00, 2658.32)");
      cars0.addCar(car0);
      // Undeclared exception!
      try { 
        cars0.getCar(point0, 100.0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cars cars0 = new Cars();
      // Undeclared exception!
      try { 
        cars0.addCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals(cars0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals("O carro necessita de ser abastecido\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(2345);
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar(",F<<C", point0, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cars cars0 = new Cars();
      try { 
        cars0.searchCar((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(1122.24200999);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("<FMQv:>!\"ah'uN?", "<FMQv:>!\"ah'uN?", "k)k", (-1524), "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("<FMQv:>!\"ah'uN?", owner0, car_CarType0, 0.2, 0.2, (-1524), (-1524), point0, "");
      cars0.addCar(car0);
      Car car1 = cars0.searchCar("<FMQv:>!\"ah'uN?");
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(1122.24200999);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("<FMQv:>!\"ah'uN?", "<FMQv:>!\"ah'uN?", "k)k", (-1524), "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("<FMQv:>!\"ah'uN?", owner0, car_CarType0, 0.2, 0.2, (-1524), (-1524), point0, "");
      cars0.addCar(car0);
      try { 
        cars0.addCar(car0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar(point0, (-4595.411234), car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(4350.676022385589);
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar(point0, point0, 4350.676022385589, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.gas;
      ArrayList<Car> arrayList0 = cars0.listOfCarType(car_CarType0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cars cars0 = new Cars();
      Cars cars1 = cars0.clone();
      boolean boolean0 = cars0.equals(cars1);
      assertTrue(boolean0);
  }
}
