/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 15:47:20 GMT 2020
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Utils.Point;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "R/+%,l]?TsG2{/=Gqz", "@CwtLVv'B DrY^", "", 0);
      Point point1 = client0.getPos();
      assertNotSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "-", "", 1);
      client0.rate(0);
      Client client1 = client0.clone();
      assertNotSame(client1, client0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(2177.5);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "@nZ", "", 2);
      client0.rate((-1905));
      Client client1 = client0.clone();
      assertNotSame(client1, client0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double((-2095.62114));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "e=xb.%FURac", "e=xb.%FURac", "", 2040);
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, (-2095.62114), 0.4, 0.0, 2040, point0, "");
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        client0.rate(rental0, (-4491), (-4491));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Client client0 = new Client((Point) null, "V<Os)zsPnBZvR", "Electrico", "", "Electrico", (-1));
      // Undeclared exception!
      try { 
        client0.getPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(2.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "8jH7\u0007^kA", "8jH7\u0007^kA", "8jH7\u0007^kA", "8jH7\u0007^kA", 0);
      Client client1 = new Client(point0, "8jH7\u0007^kA", "8jH7\u0007^kA", "8jH7\u0007^kA", "8jH7\u0007^kA", 0);
      Owner owner0 = new Owner("8jH7\u0007^kA", "@7Hw&9)JacZ]Q*ZJLF", "}|f92!ftprY#)", 0, "8jH7\u0007^kA");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("8jH7\u0007^kA", owner0, car_CarType0, 0.35, (-1543.439925871485), 2.0, 1, point0, "Carro:          ");
      Rental rental0 = new Rental(car0, client1, point0);
      client0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, client0, point0);
      client1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "^ypNrEzI+?u[&6", 23);
      Client client1 = new Client(point0, "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "UoZ7o>r.3@@/`$u ", 23);
      client0.setPos((Point) null);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Client client0 = new Client((Point) null, "q[][8^RUs_N>IlJ", (String) null, (String) null, "", 80982221);
      // Undeclared exception!
      try { 
        client0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "", 1);
      Client client1 = client0.clone();
      Owner owner0 = new Owner("", "", "OoM5;&\"]", 1, "{Z1%WICB.0");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("", owner0, car_CarType0, (-1108.419145959), 0, 0.0, 1, point0, "OoM5;&\"]");
      Rental rental0 = new Rental(car0, client1, point0);
      client1.addPendingRental(rental0);
      client1.setPos(point0);
      boolean boolean0 = client0.equals(client1);
      assertFalse(client1.equals((Object)client0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "", 1);
      Client client1 = client0.clone();
      assertFalse(client1.equals((Object)client0));
      
      client1.setPos(point0);
      boolean boolean0 = client0.equals(client1);
      assertTrue(client1.equals((Object)client0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(2.59277588503);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "8jH7^kA", "8jH7^kA", "8jH7^kA", "8jH7^kA", 10);
      boolean boolean0 = client0.equals("8jH7^kA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-12.9576415));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Yg9NsWLY*", "Yg9NsWLY*", "Yg9NsWLY*", "Yg9NsWLY*", 2373);
      boolean boolean0 = client0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "^ypNrEzI+?u[&6", 23);
      boolean boolean0 = client0.equals(client0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "", 1);
      List<Rental> list0 = client0.getPendingRates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "", 1);
      Owner owner0 = new Owner("", "", "OoM5;&\"]", 1, "{Z1%WICB.0");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("", owner0, car_CarType0, (-1108.419145959), 0, 0.0, 1, point0, "OoM5;&\"]");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.rate(rental0, 0, (-3626));
      assertEquals((-3626), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "", 1);
      Client client1 = client0.clone();
      boolean boolean0 = client0.equals(client1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "^ypNrEzI+?u[&6", "UoZ7o>r.3@@/`$u ", "^ypNrEzI+?u[&6", "", 1);
      Owner owner0 = new Owner("", "", "OoM5;&\"]", 1, "{Z1%WICB.0");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("", owner0, car_CarType0, (-1108.419145959), 0, 0.0, 1, point0, "OoM5;&\"]");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      List<Rental> list0 = client0.getPendingRates();
      assertFalse(list0.isEmpty());
  }
}
