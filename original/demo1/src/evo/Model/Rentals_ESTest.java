/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 16:23:15 GMT 2020
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Model.Rentals;
import Utils.Point;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rentals_ESTest extends Rentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("['Re0", (String) null, "%.2f", 777, (String) null);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(1265, 1265, zoneOffset0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0, (LocalDateTime) null, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "y]em*066iHIOj[%", "y]em*066iHIOj[%", (String) null, "\";%M41zvA[R", 10);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      List<Rental> list0 = rentals0.getRentalListClient(client0, (LocalDateTime) null, localDateTime0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "eh~~7xlqVqYi&'^**@", "eh~~7xlqVqYi&'^**@", 0, "s]!OG/dA5L\"{b8o=");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, 4.0, 0, 169, point0, "eh~~7xlqVqYi&'^**@");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(169, 0, zoneOffset0);
      double double1 = rentals0.getTotalBilledCar(car0, localDateTime0, (LocalDateTime) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      rentals0.addRental((Rental) null);
      rentals0.addRental((Rental) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 1143.5, 2787, point0, "");
      Client client0 = new Client(point0, "Custo Estimado: ", "Custo Estimado: ", "", "", 3);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("Model.Car", "Model.Car", "Model.Car", (-1252), "Model.Car");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(1342);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Model.Car", owner0, car_CarType0, 977.3849001, (-1252), 0.0, 1342, point0, "Model.Car");
      Client client0 = new Client(point0, "Model.Car", "S%1iY", "Model.Car", "S%1iY", (-1252));
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient("Model.Car");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 1143.5, 2787, point0, "");
      Client client0 = new Client(point0, "Custo Estimado: ", "Custo Estimado: ", "", "", 3);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(2, 2, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 2, zoneOffset0);
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Rentals rentals1 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(16);
      boolean boolean0 = rentals0.equals(double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(16);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "(16.00, 16.00)", "", "", 16);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      List<Rental> list0 = rentals0.getRentalListClient(",&OC");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "", 16, "");
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double((-325.585));
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("", (Owner) null, car_CarType0, (-2009.06387487), 0.0, 0.0, 2685, point0, "");
      double double1 = rentals0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("Model.Rental", "a?Z:R,", "a?Z:R,", (-3521), "Model.Rental");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("a?Z:R,", owner0, car_CarType0, 1223.0, (-1.0), 598.0, 0, point0, "VF[,b?z");
      Client client0 = new Client(point0, (String) null, (String) null, "Tempo Total: ", (String) null, 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(",&OC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
