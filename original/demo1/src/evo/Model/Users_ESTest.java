/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 16:25:48 GMT 2020
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Owner;
import Model.User;
import Model.Users;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Users_ESTest extends Users_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("", "", "", 2938, "");
      owner0.rate(0);
      users0.addUser(owner0);
      User user0 = users0.getUser("");
      assertTrue(user0.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("", "", "", 2938, "");
      owner0.rate((-1));
      users0.addUser(owner0);
      User user0 = users0.getUser("");
      assertTrue(user0.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("", "", "Model.Users", 1166, " at[2Da8R0");
      users0.addUser(owner0);
      List<String> list0 = users0.getClientIDS();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Users users0 = new Users();
      // Undeclared exception!
      try { 
        users0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Users users0 = new Users();
      Users users1 = new Users();
      boolean boolean0 = users0.equals(users1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals(users0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Users users0 = new Users();
      boolean boolean0 = users0.equals("x-*RcZNNY$jxz7_>-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Users users0 = new Users();
      try { 
        users0.getUser("Y6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 1946, (String) null);
      users0.addUser(owner0);
      User user0 = users0.getUser((String) null);
      assertTrue(user0.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Users users0 = new Users();
      Owner owner0 = new Owner("Carro:          ", "Carro:          ", "Carro:          ", (-1300), " -> ");
      users0.addUser(owner0);
      try { 
        users0.addUser(owner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Users users0 = new Users();
      List<String> list0 = users0.getClientIDS();
      assertEquals(0, list0.size());
  }
}
