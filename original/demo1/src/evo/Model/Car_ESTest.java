/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 15:52:11 GMT 2020
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("1", "1", "WM(CAi|", 3, "WM(CAi|");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("1", owner0, car_CarType0, 3, 0.0, 0.0, 3, point0, "1");
      Car car1 = new Car("1", owner0, car_CarType0, 3, 0.0, 0.0, 3, point0, "WM(CAi|");
      car0.rate(3, 3074);
      boolean boolean0 = car1.equals(car0);
      assertEquals(3074, owner0.getRates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner("", "E)5.u't/c>48Kl5WB8r", "Vq!>Z!%a!`&aSKq:lF", (-2546), "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-2717));
      Double double1 = new Double(1177.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2546), (-2546), (-2546), (-2717), point0, "");
      Car car1 = car0.clone();
      Client client0 = new Client(point0, "(`WS+!6g|Y7Qm>jN{7I", "O carro necessita de ser abastecido\n", "kA[-8g", "Vq!>Z!%a!`&aSKq:lF", (-2717));
      Point point1 = new Point(double1, double0);
      Rental rental0 = new Rental(car1, client0, point1);
      rental0.rent();
      boolean boolean0 = car0.equals(car1);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("O6~o49", "O6~o49", "O6~o49", 100, ";|=:Ei");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("O6~o49", owner0, car_CarType0, 631.67277680197, 1.2, 0.0, 100, point0, ";|=:Ei");
      Car car1 = car0.clone();
      car0.setBasePrice((-1541.59602));
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner(", ", ", ", ", ", (-569), "CahE)");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-615.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(", ", owner0, car_CarType0, 1.2, 1022.338431848, 1.0, (-569), point0, "CahE)");
      Car car1 = new Car(", ", owner0, car_CarType0, 1177, 0.0, (-569), 1177, point0, "");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner(", ", ", ", "", 0, "Ws;>|y&T");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-2709.9456));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(", ", owner0, car_CarType0, 3052.4142686388, 0, 461.0, 0, point0, "");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "", "|{ph>}9bbfP+| t?~!", (-1906), "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((-1474.573965015));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1906), (-1906), (-1474.573965015), 1032, point0, "|{ph>}9bbfP+| t?~!");
      Double double1 = new Double((-1906));
      Point point1 = new Point(double0, double1);
      boolean boolean0 = car0.hasRange(point1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("Utils.Point", (String) null, "7Tg", 952, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-459.980353806514));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Utils.Point", owner0, car_CarType0, 952, 0.0, 968.7, 952, point0, "Utils.Point");
      car0.rate(952);
      Client client0 = new Client(point0, "7Tg", "", "", "", 952);
      Rental rental0 = new Rental(car0, client0, point0);
      rental0.rate(952, 952);
      String string0 = car0.toString();
      assertEquals(952, owner0.getRates());
      assertEquals("Utils.Point\n952.00\n0.00\ntrue\n952", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("Model.Car$CarType", "", "", (-2235), "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(2156.691744616);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Model.Car$CarType", owner0, car_CarType0, 2227.0993718, (-2235), 2156.691744616, 4, point0, "Model.Car$CarType");
      boolean boolean0 = car0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.2, 0.2, 0.2, 0, point0, "");
      car0.swapState();
      boolean boolean0 = car0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("Electrico", "Electrico", "Electrico", (-1273), ":bneP<j");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = Double.valueOf(0.15);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("'ro{m<$:1AP", owner0, car_CarType0, 0.35, 0.6, 0.35, (-1273), point0, "'ro{m<$:1AP");
      Car.CarType car_CarType1 = car0.getType();
      assertSame(car_CarType0, car_CarType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner("$", "$", "gas", 0, "$");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1287.269364972));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("gas", owner0, car_CarType0, 0, (-1287.269364972), (-1287.269364972), 0, point0, "Mzc72^vos?HM0F\"");
      double double1 = car0.getRange();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("", "M`)LSqe6rO", "", 0, (String) null);
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-2069.3718581));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 481.1960017, 0, (-2069.3718581), 100, point0, "F-`*8Ie%JD^Y*L/=");
      double double1 = car0.getRange();
      assertEquals(100.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner((String) null, " -> ", " -> ", (-2396), (String) null);
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-2396));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(" -> ", owner0, car_CarType0, (-2396), 2194.831104655063, 0.0, (-2396), point0, (String) null);
      double double1 = car0.getRange();
      assertEquals((-2396.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("electric", "", "", 1984, "2Skg_5pq$5");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("electric", owner0, car_CarType0, 0.0, 0.0, 0.0, 1455, (Point) null, "electric");
      Point point0 = car0.getPosition();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1243.9));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Todos", (Owner) null, car_CarType0, 2.0, 3690.2173141, (-770.9571561417848), 0, point0, "Model.Rental");
      Point point1 = car0.getPosition();
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "T*J^y2n<`&nZVK+(", "T*J^y2n<`&nZVK+(", 1, (String) null);
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 2.0, 1, 2.0, 1, point0, (String) null);
      String string0 = car0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("", "", "|{ph>}9bbfP+| t?~!", (-1906), "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((-1474.573965015));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1906), (-1906), (-1474.573965015), 1032, point0, "|{ph>}9bbfP+| t?~!");
      String string0 = car0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, (String) null, 0, "O carro necessita de ser abastecido\n");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(3115.93931832838);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0, (-48.8045810303), (-2218.57), 1349, point0, (String) null);
      String string0 = car0.getNumberPlate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("4)|T_G_6][W:`o-mC", "4)|T_G_6][W:`o-mC", " 42F", 0, "4)|T_G_6][W:`o-mC");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-591.1801054715888));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("4)|T_G_6][W:`o-mC", owner0, car_CarType0, 0.0, 0.0, 2436.1707, (-1240), point0, " 42F");
      String string0 = car0.getNumberPlate();
      assertEquals("4)|T_G_6][W:`o-mC", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("", "", "|{ph>}9bbfP+| t?~!", (-1906), "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((-1474.573965015));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1906), (-1906), (-1474.573965015), 1032, point0, "|{ph>}9bbfP+| t?~!");
      String string0 = car0.getNumberPlate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("0cx2n6iMX", "0cx2n6iMX", "LGLdfEJ:", 0, "O#y:vYO");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("d^;", owner0, car_CarType0, 0, 0, 0.2, 0, point0, "O#y:vYO");
      double double1 = car0.getBasePrice();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1243.9));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Todos", (Owner) null, car_CarType0, 2.0, 3690.2173141, (-770.9571561417848), 0, point0, "Model.Rental");
      double double1 = car0.getBasePrice();
      assertEquals(3690.2173141, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "", (-82), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, (-82), 0.5, (-1875), point0, "W");
      double double1 = car0.getBasePrice();
      assertEquals((-82.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, "%", 0, "%");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0, 0, point0, (String) null);
      double double1 = car0.getAvgSpeed();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 517, "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(349.551451501);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 517, 517, 349.551451501, 1118, point0, "`\"ji_^UCK/WOQS{");
      double double1 = car0.getAvgSpeed();
      assertEquals(517.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Owner owner0 = new Owner("Viagem:         ", "Viagem:         ", "29j", (-1), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.5);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1), (-1), 0.4, 100, point0, "Tempo a p\u00E9      ");
      double double1 = car0.getAvgSpeed();
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Owner owner0 = new Owner((String) null, (String) null, "e{0q/#iI~Kv=X8<", 1128, (String) null);
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("e{0q/#iI~Kv=X8<", owner0, car_CarType0, 1441.3, 1128, 1128, (-2030), (Point) null, (String) null);
      // Undeclared exception!
      try { 
        car0.setPosition((Point) null, 4.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(596.6098357239);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, (Owner) null, car_CarType0, 1.0, (-2077.642161335), (-1.0), (-2669), point0, "T8BNyybOR6?K8VCw(");
      // Undeclared exception!
      try { 
        car0.rate((-2669), (-2669));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("&FC%x8xR=<tLEr", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, 0, point0, "k,VM?@?hS");
      Client client0 = new Client(point0, "k,VM?@?hS", "", "=\"8\"EQq^K~(TsST97 ", "y{", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.pendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("-bSzv[Tx", (Owner) null, car_CarType0, 623.0, 623.0, 0.5, 965, (Point) null, "566>M4#?");
      // Undeclared exception!
      try { 
        car0.hasRange((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-587.944898));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, (-3749.85), 439.0, (-3749.85), (-1305), point0, "]5~6@?UqY<BNou");
      // Undeclared exception!
      try { 
        car0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-1073.709762));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, 366, point0, "");
      Client client0 = new Client(point0, "_<0bT%O,[ e%I1:", "OdYZ#PX$", "w}R8LaN~xTd", "X^`C_wYM}*La", (-1));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.approvePendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Owner owner0 = new Owner("l6+t mZK/,t,HQ", "l6+t mZK/,t,HQ", "l6+t mZK/,t,HQ", (-1719145501), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1719145501));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Co-hJTho&5\"'J;", owner0, car_CarType0, (-1.0), 1.156599765568459, 1.156599765568459, 0, point0, "\"n");
      Car car1 = car0.clone();
      Car car2 = car1.clone();
      assertTrue(car2.equals((Object)car1));
      
      car2.approvePendingRental((Rental) null);
      boolean boolean0 = car1.equals(car2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Owner owner0 = new Owner("l6+t mZK/,t,HQ", "l6+t mZK/,t,HQ", "l6+t mZK/,t,HQ", (-1719145501), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1719145501));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1719145501), (-1719145501), (-1719145501), (-1719145501), point0, "l6+t mZK/,t,HQ");
      Car car1 = car0.clone();
      Car car2 = car1.clone();
      car1.rate(0, 2);
      boolean boolean0 = car1.equals(car2);
      assertEquals(2, owner0.getRates());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Owner owner0 = new Owner("l6+t mZK/,t,HQ", "l6+t mZK/,t,HQ", "l6+t mZK/,t,HQ", (-1719145501), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1719145501));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Co-hJTho&5\"'J;", owner0, car_CarType0, (-1.0), 1.156599765568459, 1.156599765568459, 0, point0, "\"n");
      Car car1 = car0.clone();
      Car car2 = car1.clone();
      boolean boolean0 = car1.equals(car2);
      assertTrue(boolean0);
      assertFalse(car2.equals((Object)car0));
      assertFalse(car0.equals((Object)car1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Owner owner0 = new Owner("", "", "Vq!>Z!%a!`&aSKq:lF", (-2546), "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(1177.0);
      Double double1 = new Double((-2546));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2546), (-2546), (-2546), (-2546), point0, "");
      Car car1 = car0.clone();
      Client client0 = new Client(point0, "", "", "%%", "Vq!>Z!%a!`&aSKq:lF", (-2546));
      Point point1 = new Point(double1, double0);
      Rental rental0 = new Rental(car1, client0, point1);
      rental0.rent();
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Owner owner0 = new Owner("1", "1", "WM(CAi|", 3, "WM(CAi|");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("1", owner0, car_CarType0, 3, 0.0, 0.0, 3, point0, "1");
      Car car1 = car0.clone();
      car1.swapState();
      boolean boolean0 = car1.equals(car0);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Owner owner0 = new Owner("", "", "WM(+CAi|", 3, "WM(+CAi|");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-15.735709162049305));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 3, (-15.735709162049305), (-15.735709162049305), 3, point0, "");
      Car car1 = car0.clone();
      car1.setBasePrice(3);
      boolean boolean0 = car0.equals(car1);
      assertFalse(car1.equals((Object)car0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Owner owner0 = new Owner("1", "1", "WM(CAi|", 3, "WM(CAi|");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("1", owner0, car_CarType0, 3, 0.0, 0.0, 3, point0, "1");
      Car car1 = car0.clone();
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
      assertFalse(car0.equals((Object)car1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 172, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = Double.valueOf(737.8167);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-93.1151577), 737.8167, 172, 172, point0, "");
      Car car1 = new Car("", owner0, car_CarType0, (-3967.0758871275993), (-8049.0489354720985), 0.35, 4, point0, "Utils.Point");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "T*J^y2n<`&nZVK+(", "T*J^y2n<`&nZVK+(", 1, (String) null);
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 2.0, 1, 2.0, 1, point0, (String) null);
      boolean boolean0 = car0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Owner owner0 = new Owner("1", "1", "WM(+CAi|", 3, "WM(+CAi|");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(26.33658037818779);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("1", owner0, car_CarType0, 3, 26.33658037818779, 26.33658037818779, 3, point0, "1");
      boolean boolean0 = car0.equals(car0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Owner owner0 = new Owner("Todos", "Todos", "Todos", 986681676, "Todos");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(986681676);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Todos", owner0, car_CarType0, (-518.0), 0.1, (-6415.96118063), 986681676, point0, "D)'6MYyf}nG@:>Hp");
      Object object0 = new Object();
      boolean boolean0 = car0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Owner owner0 = new Owner("Viagem:         ", "Viagem:         ", "29j", (-1), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1), (-1), 0.4, 100, point0, "29j");
      Double double1 = new Double(0.15);
      Point point1 = new Point(double1, double1);
      car0.setPosition(point1, (-1.0));
      String string0 = car0.warnings();
      assertEquals("O carro necessita de ser abastecido\n", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Owner owner0 = new Owner("Todos", "Todos", "Todos", 986681676, "Todos");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(986681676);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Todos", owner0, car_CarType0, (-518.0), 0.1, (-6415.96118063), 986681676, point0, "D)'6MYyf}nG@:>Hp");
      String string0 = car0.warnings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner("", "", "Vq!>Z!%a!`&aSKq:lF", (-2546), "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(1177.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2546), (-2546), (-2546), (-2546), point0, "");
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Owner owner0 = new Owner("Viagem:         ", "Viagem:         ", "29j", (-1), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1), (-1), 0.4, 100, point0, "29j");
      Double double1 = new Double(0.15);
      Point point1 = new Point(double1, double1);
      car0.setPosition(point1, (-1.0));
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Owner owner0 = new Owner("O6~o49", "O6~o49", "O6~o49", 100, "O6~o49");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("O6~o49", owner0, car_CarType0, 100, 1.2, 0.0, 100, point0, "O6~o49");
      car0.swapState();
      car0.swapState();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Electrico");
      assertEquals(Car.CarType.electric, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Todos");
      assertEquals(Car.CarType.any, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Gasolina");
      assertEquals(Car.CarType.gas, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      try { 
        Car.CarType.fromString("e}Qk");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car$CarType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Hibrido");
      assertEquals(Car.CarType.hybrid, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Car.CarType car_CarType1 = Car.CarType.hybrid;
      boolean boolean0 = car_CarType1.equals(car_CarType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Car.CarType car_CarType1 = Car.CarType.hybrid;
      boolean boolean0 = car_CarType0.equals(car_CarType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      boolean boolean0 = car_CarType0.equals(car_CarType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Owner owner0 = new Owner("Utils.Point", (String) null, "7Tg", 964, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-459.980353806514));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Utils.Point", owner0, car_CarType0, 964, 964, 964, 964, point0, "Utils.Point");
      Client client0 = new Client(point0, "7Tg", "", "", "", 964);
      Rental rental0 = new Rental(car0, client0, point0);
      car0.pendingRental(rental0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Owner owner0 = new Owner("O6~o49", "O6~o49", "O6~o49", 100, "O6~o49");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("O6~o49", owner0, car_CarType0, 100, 1.2, 0.0, 100, point0, "O6~o49");
      String string0 = car0.getOwnerID();
      assertEquals("O6~o49", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Owner owner0 = new Owner("", "", "WM(+CAi|", 3, "WM(+CAi|");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-15.735709162049305));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 3, (-15.735709162049305), (-15.735709162049305), 3, point0, "");
      car0.refil();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(596.6098357239);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("T8BNyybOR6?K8VCw(", "1 4yl!;yQ?Q&>_oB];-", "", (-2669), (String) null);
      Car car0 = new Car("1 4yl!;yQ?Q&>_oB];-", owner0, car_CarType0, 596.6098357239, (-6415.96118063), 0.4, 1211, point0, (String) null);
      Car car1 = car0.clone();
      Car car2 = car1.clone();
      // Undeclared exception!
      try { 
        car1.equals(car2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
