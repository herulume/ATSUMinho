/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 18 16:38:43 GMT 2020
 */

package Utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Utils.StringBetter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringBetter_ESTest extends StringBetter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter((String) null);
      StringBetter stringBetter1 = stringBetter0.blue();
      StringBetter stringBetter2 = stringBetter1.show_cursor();
      StringBetter stringBetter3 = stringBetter2.append((String) null);
      StringBetter stringBetter4 = stringBetter3.cyan();
      stringBetter4.hide_cursor();
      StringBetter stringBetter5 = stringBetter4.hide_cursor();
      stringBetter5.cyan();
      String string0 = stringBetter0.getStr();
      assertNull(string0);
  }

  @Test(timeout = 400000)
  public void test01()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("\u001B[4m");
      StringBetter stringBetter1 = stringBetter0.hide_cursor();
      StringBetter stringBetter2 = stringBetter1.repeat(602);
      StringBetter stringBetter3 = stringBetter2.repeat(602);
      StringBetter stringBetter4 = stringBetter2.append("\u001B[4m");
      StringBetter stringBetter5 = stringBetter4.repeat(0);
      stringBetter1.grey();
      StringBetter stringBetter6 = stringBetter3.hide_cursor();
      stringBetter6.white();
      stringBetter6.blue();
      stringBetter1.blue();
      stringBetter0.white();
      StringBetter stringBetter7 = stringBetter3.white();
      stringBetter7.green();
      StringBetter stringBetter8 = stringBetter3.blink();
      stringBetter8.orange();
      stringBetter4.green();
      StringBetter stringBetter9 = stringBetter3.black();
      stringBetter1.append("\u001B[4m");
      stringBetter9.getStr();
      stringBetter9.bold();
      StringBetter stringBetter10 = stringBetter2.roxo();
      stringBetter10.green();
      stringBetter5.show_cursor();
      // Undeclared exception!
      stringBetter8.repeat(602);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blink();
      StringBetter stringBetter2 = stringBetter1.append("\u001B[31m");
      StringBetter stringBetter3 = stringBetter2.green();
      StringBetter stringBetter4 = stringBetter3.cyan();
      StringBetter stringBetter5 = stringBetter4.repeat(0);
      String string0 = stringBetter5.getStr();
      assertEquals("\u001B[5m\u001B[0m\u001B[31m", stringBetter1.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("3bhvt;||Y$");
      StringBetter stringBetter1 = stringBetter0.blink();
      StringBetter stringBetter2 = stringBetter1.roxo();
      StringBetter stringBetter3 = stringBetter2.append(";i");
      StringBetter stringBetter4 = stringBetter3.under();
      StringBetter stringBetter5 = stringBetter4.repeat((-1));
      String string0 = stringBetter5.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.append("zLNK**8Z<{{C/");
      StringBetter stringBetter2 = stringBetter1.white();
      StringBetter stringBetter3 = stringBetter2.hide_cursor();
      StringBetter stringBetter4 = stringBetter3.green();
      StringBetter stringBetter5 = stringBetter4.show_cursor();
      StringBetter stringBetter6 = stringBetter5.grey();
      assertEquals("\u001B[37m\u001B[32m\u001B[38mzLNK**8Z<{{C/\u001B[0m\u001B[?25l\u001B[0m\u001B[?25h\u001B[0m", stringBetter6.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.hide_cursor();
      StringBetter stringBetter2 = stringBetter1.orange();
      StringBetter stringBetter3 = stringBetter2.blue();
      StringBetter stringBetter4 = stringBetter3.bold();
      StringBetter stringBetter5 = stringBetter4.roxo();
      StringBetter stringBetter6 = stringBetter5.show_cursor();
      assertEquals("\u001B[35m\u001B[1m\u001B[34m\u001B[33m\u001B[?25l\u001B[0m\u001B[0m\u001B[0m\u001B[0m\u001B[?25h", stringBetter6.getStr());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("qS)@:AY");
      StringBetter stringBetter1 = stringBetter0.append("qS)@:AY");
      StringBetter stringBetter2 = stringBetter1.white();
      StringBetter stringBetter3 = stringBetter2.roxo();
      StringBetter stringBetter4 = stringBetter3.show_cursor();
      StringBetter stringBetter5 = stringBetter4.under();
      String string0 = stringBetter5.toString();
      assertEquals("\u001B[4m\u001B[35m\u001B[38mqS)@:AYqS)@:AY\u001B[0m\u001B[0m\u001B[?25h\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("W,ak=t[2V$hX0M7,");
      StringBetter stringBetter1 = stringBetter0.bold();
      StringBetter stringBetter2 = stringBetter1.black();
      assertEquals("\u001B[30m\u001B[1mW,ak=t[2V$hX0M7,\u001B[0m\u001B[0m", stringBetter2.getStr());
      
      StringBetter stringBetter3 = stringBetter1.blue();
      StringBetter stringBetter4 = stringBetter3.blink();
      stringBetter4.blue();
      String string0 = stringBetter4.getStr();
      assertEquals("\u001B[5m\u001B[34m\u001B[1mW,ak=t[2V$hX0M7,\u001B[0m\u001B[0m\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.black();
      StringBetter stringBetter2 = stringBetter1.bold();
      StringBetter stringBetter3 = stringBetter2.under();
      StringBetter stringBetter4 = stringBetter3.grey();
      StringBetter stringBetter5 = stringBetter4.green();
      StringBetter stringBetter6 = stringBetter5.roxo();
      assertEquals("\u001B[35m\u001B[32m\u001B[37m\u001B[4m\u001B[1m\u001B[30m\u001B[0m\u001B[0m\u001B[0m\u001B[0m\u001B[0m\u001B[0m", stringBetter6.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.hide_cursor();
      StringBetter stringBetter2 = stringBetter1.repeat(0);
      StringBetter stringBetter3 = stringBetter2.roxo();
      assertEquals("\u001B[35m\u001B[0m", stringBetter3.getStr());
      
      String string0 = stringBetter1.getStr();
      assertEquals("\u001B[?25l", string0);
      
      stringBetter2.repeat(0);
      assertEquals("\u001B[?25l", stringBetter1.getStr());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter(")/akOhh!@U\")CtR@");
      StringBetter stringBetter1 = stringBetter0.white();
      assertEquals("\u001B[38m)/akOhh!@U\")CtR@\u001B[0m", stringBetter1.getStr());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.grey();
      stringBetter1.blue();
      stringBetter1.grey();
      StringBetter stringBetter2 = stringBetter0.blue();
      assertEquals("\u001B[34m\u001B[0m", stringBetter2.getStr());
      
      StringBetter stringBetter3 = stringBetter1.roxo();
      assertEquals("\u001B[35m\u001B[37m\u001B[0m\u001B[0m", stringBetter3.getStr());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("}V/d1m");
      StringBetter stringBetter1 = stringBetter0.red();
      stringBetter1.repeat(869);
      assertEquals("\u001B[31m}V/d1m\u001B[0m", stringBetter1.getStr());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      stringBetter0.append("qY5Y8|");
      stringBetter0.grey();
      StringBetter stringBetter1 = stringBetter0.repeat((-1544));
      assertNotSame(stringBetter0, stringBetter1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      stringBetter0.cyan();
      StringBetter stringBetter1 = stringBetter0.repeat(1);
      assertFalse(stringBetter1.equals((Object)stringBetter0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.green();
      StringBetter stringBetter2 = stringBetter1.hide_cursor();
      StringBetter stringBetter3 = stringBetter2.bold();
      StringBetter stringBetter4 = stringBetter3.orange();
      StringBetter stringBetter5 = stringBetter4.cyan();
      String string0 = stringBetter5.toString();
      assertEquals("\u001B[36m\u001B[33m\u001B[1m\u001B[32m\u001B[0m\u001B[?25l\u001B[0m\u001B[0m\u001B[0m", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("\u001B[32m");
      StringBetter stringBetter1 = stringBetter0.black();
      StringBetter stringBetter2 = stringBetter1.blink();
      assertEquals("\u001B[5m\u001B[30m\u001B[32m\u001B[0m\u001B[0m", stringBetter2.toString());
      
      StringBetter stringBetter3 = stringBetter0.bold();
      StringBetter stringBetter4 = stringBetter3.blue();
      assertEquals("\u001B[34m\u001B[1m\u001B[32m\u001B[0m\u001B[0m", stringBetter4.getStr());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.orange();
      assertEquals("\u001B[33m\u001B[0m", stringBetter1.toString());
      
      StringBetter stringBetter2 = stringBetter0.cyan();
      StringBetter stringBetter3 = stringBetter2.blue();
      assertEquals("\u001B[34m\u001B[36m\u001B[0m\u001B[0m", stringBetter3.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.orange();
      StringBetter stringBetter2 = stringBetter1.blue();
      assertEquals("\u001B[34m\u001B[33m\u001B[0m\u001B[0m", stringBetter2.getStr());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter("");
      StringBetter stringBetter1 = stringBetter0.grey();
      StringBetter stringBetter2 = stringBetter1.under();
      assertEquals("\u001B[4m\u001B[37m\u001B[0m\u001B[0m", stringBetter2.toString());
      
      StringBetter stringBetter3 = stringBetter0.green();
      assertEquals("\u001B[32m\u001B[0m", stringBetter3.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.show_cursor();
      assertEquals("\u001B[?25h", stringBetter1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBetter stringBetter0 = new StringBetter();
      StringBetter stringBetter1 = stringBetter0.blink();
      StringBetter stringBetter2 = stringBetter1.white();
      stringBetter2.under();
      StringBetter stringBetter3 = stringBetter2.cyan();
      StringBetter stringBetter4 = stringBetter0.bold();
      StringBetter stringBetter5 = stringBetter4.black();
      StringBetter stringBetter6 = stringBetter1.roxo();
      StringBetter stringBetter7 = stringBetter4.show_cursor();
      StringBetter stringBetter8 = stringBetter7.hide_cursor();
      stringBetter6.grey();
      StringBetter stringBetter9 = stringBetter0.orange();
      stringBetter9.show_cursor();
      StringBetter stringBetter10 = stringBetter6.blue();
      StringBetter stringBetter11 = stringBetter10.hide_cursor();
      StringBetter stringBetter12 = stringBetter0.orange();
      stringBetter11.repeat(1550);
      stringBetter8.roxo();
      stringBetter11.green();
      stringBetter4.getStr();
      StringBetter stringBetter13 = stringBetter9.blink();
      stringBetter0.under();
      StringBetter stringBetter14 = stringBetter1.orange();
      stringBetter14.cyan();
      stringBetter5.hide_cursor();
      StringBetter stringBetter15 = stringBetter11.append("\u001B[1m\u001B[0m");
      stringBetter15.toString();
      stringBetter12.hide_cursor();
      stringBetter13.red();
      stringBetter3.append((String) null);
      stringBetter3.roxo();
      assertEquals("\u001B[36m\u001B[38m\u001B[5m\u001B[0m\u001B[0m\u001B[0mnull", stringBetter3.getStr());
      
      stringBetter14.under();
      assertEquals("\u001B[33m\u001B[5m\u001B[0m\u001B[0m", stringBetter14.getStr());
  }
}
